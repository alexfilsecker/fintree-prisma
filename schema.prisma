// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  output   = "./generated"
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String

  credentials Credentials[]
  categories  Category[]
}

model Institution {
  id   Int              @id @default(autoincrement())
  name InstitutionNames

  credentials Credentials[]
}

enum InstitutionNames {
  SANTANDER
  COMMONWEALTH
}

model Credentials {
  id            Int    @id @default(autoincrement())
  institutionId Int
  userId        Int
  username      String
  password      String

  user        User        @relation(fields: [userId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])
  accounts    Account[]

  @@unique([userId, institutionId])
}

model Account {
  id            Int       @id @default(autoincrement())
  credentialsId Int
  name          AccountNames
  currency      Currencys

  credentials Credentials @relation(fields: [credentialsId], references: [id])
  movements   Movement[]
}

enum AccountNames {
  SMART_ACCESS
  CURRENT_ACCOUNT
  GOLD_LATAM
  PLATINUM_LATAM
}

enum Currencys {
  CLP
  AUD
}

model Category {
  id               Int     @id @default(autoincrement())
  userId           Int
  parentCategoryId Int?
  name             String
  description      String?

  categories     Category[] @relation("SubCategories")
  user           User       @relation(fields: [userId], references: [id])
  parentCategory Category?  @relation("SubCategories", fields: [parentCategoryId], references: [id])
  movements      Movement[]
}

model GroupMovement {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?

  movements Movement[]
}

model Movement {
  id              Int     @id @default(autoincrement())
  accountId       Int
  groupMovementId Int?
  categoryId      Int?
  pending         Boolean @default(false)
  date            DateTime
  valueDate       DateTime
  description     String
  userDescription String?
  amount          Float
  balance         Float?

  account       Account        @relation(fields: [accountId], references: [id])
  groupMovement GroupMovement? @relation(fields: [groupMovementId], references: [id])
  category      Category?      @relation(fields: [categoryId], references: [id])

  @@unique([accountId, valueDate, description, amount])
}
